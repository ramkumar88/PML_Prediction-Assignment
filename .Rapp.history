install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages("dbConnect")
ucscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
dbConnect
?pbeta
x <- 1:4#
p <- x/sum(x)#
temp <- rbind(x, p)#
rownames(temp) <- c("X", "Prob")
histo?
)
?hist
hist(temp)
?plot
plot(temp)
pbinom(2, size = 5)
pbinom(2, size = 5,prob=0.5)
pbinom(4, size = 5,prob=0.5)
pbinom(5, size = 5,prob=0.5)
?ppois
pbinom(c(4,5), size = 5,prob=0.5)
6/32
?pnorm
dnorm(14,mean=15,sd=1)
dnorm(16,mean=15,sd=1)
dnorm(15,mean=15,sd=1)
0.2419707*2
+0.3989423
0.4839414 +0.3989423
dnorm(seq(14,16),mean=15,sd=1)
pnorm(seq(14,16),mean=15,sd=1)
0.8413447 - 0.1586553
1/12
ppois(0,lambda=6)
e^-6
e
exp?
?
)
?exp
exp(-6)
ppois(0:10,lambda=15)
sum(ppois(0:10,lambda=15))
sum(ppois(0:5=4,lambda=6))
sum(ppois(0:4,lambda=6))
ppois(0:4,lambda=6)
ppois(1),lambda=6)
ppois(1,lambda=6)
qpois(1,lambda=6)
dpois(1,lambda=6)
sum(dpois(0:4,lambda=6))
sum(dpois(0:10,lambda=15))
combn(1:9,3)
0.8/1.1
1/12
1/24
1/144
1/12 * 1/12
sqrt(1/12)
10/11
1/.15
1/0.03
n <- 9
s <- 30
round(sqrt((n - 1) * s^2/qchisq(c(0.975, 0.025), n - 1)), 3)
1100 - 57
1100 +  57
sqrt((n - 1) * s^2/qchisq(c(0.975, 0.025), n - 1))
qchisq(c(0.975, 0.025), n - 1))/sqrt(n - 1)
sqrt(qchisq(c(0.975, 0.025), n - 1)/sqrt(n - 1))
sqrt((n - 1) * s^2/qchisq(0.95, n - 1))
setwd("~/Documents/Data Science/Practical Machine Learning/Week 3/Prediction Assignment")
library(caret)#
library(randomForest)
dataDir <- "data"#
trainingUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"#
trainingCSV <- file.path(dataDir,"pml-training.csv")#
testingUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"#
testingCSV <- file.path(dataDir,"pml-testing.csv")#
if (!file.exists(dataDir)){#
    dir.create(file.path(dataDir))#
}#
## read csv if raw data is not defined#
if (!file.exists(trainingCSV)){#
    download.file(trainingUrl, destfile = trainingCSV, method="curl")#
}#
## read csv if raw data is not defined#
if (!file.exists(testingCSV)){#
    download.file(testingUrl, destfile = testingCSV, method="curl")#
}#
set.seed(13343)#
## Load the data from csv#
trainingData <- read.csv(trainingCSV)#
testingData <- read.csv(testingCSV)
## Remove all columns with NA#
trainingData <- trainingData[,colSums(is.na(trainingData))==0]#
## Remove near zero variance data from training#
trainingData <- trainingData[,-nearZeroVar(trainingData)]#
#
## convert factors to indicator variables on training#
trainingData.dummyvars <- dummyVars(classe ~ ., data=trainingData)#
trainingData.forest <- as.data.frame(predict(trainingData.dummyvars, newdata=trainingData))#
trainingData.forest <- cbind(trainingData$classe,trainingData.forest)#
colnames(trainingData.forest)[1] <- "classe"#
#
## Remove near zero variance data from the new indicator variables#
trainingData <- trainingData[,-nearZeroVar(trainingData)]#
#
## Split training to training and validation#
inTrain <- createDataPartition(y=trainingData.forest$classe,p=0.70,list=FALSE)#
validationData <- trainingData.forest[-inTrain,]#
subTrainingData <- trainingData.forest[inTrain,]#
#
## Get the most correlated variables#
variableCorrelations <-  abs(cor(subTrainingData[,-1]))#
## Clear out the diagnoal#
diag(variableCorrelations) <- 0#
## Get the most correlations#
highestCorVarNames<- which(variableCorrelations > 0.90,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVariables[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVariables,collapse = " + "))
## Get the most correlations#
highestCorVarNames<- which(variableCorrelations > 0.90,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVarNames[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVarNames,collapse = " + "))
variableFormula
highestCorVarNames
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , -which(names(subTrainingData) %in% highestCorVarNames)]
dim(bestTrainingVariables)
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , which(names(subTrainingData) %in% highestCorVarNames)]
dim(bestTrainingVariables)
#fit the model#
modelFit <- train(subTrainingData$classe~ .,method="rf",data=bestTrainingVariables,trControl=trainControl(method = 'cv'))
modelFit
## check for accuracy on validation data#
pred <- predict(modelFit,validationData)
table(pred,validationData$classe)
## Get the most correlated variables#
variableCorrelations <-  abs(cor(subTrainingData[,-1]))#
## Clear out the diagnoal#
diag(variableCorrelations) <- 0#
## Get the most correlations > 0.95#
highestCorVarNames<- which(variableCorrelations > 0.95,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVarNames[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVarNames,collapse = " + "))#
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , which(names(subTrainingData) %in% highestCorVarNames)]
dim(bestTrainingVariables)
#fit the model#
modelFit2 <- train(subTrainingData$classe~ .,method="rf",data=bestTrainingVariables,trControl=trainControl(method = 'cv'))
modelFit2
## check for accuracy on validation data#
pred2 <- predict(modelFit2,validationData)
table(pred2,validationData$classe)
## Get the most correlated variables#
variableCorrelations <-  abs(cor(subTrainingData[,-1]))#
## Clear out the diagnoal#
diag(variableCorrelations) <- 0#
## Get the variables with high correlations > 0.85#
highestCorVarNames<- which(variableCorrelations > 0.85,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVarNames[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVarNames,collapse = " + "))#
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , which(names(subTrainingData) %in% highestCorVarNames)]
dim(bestTrainingVariables)
#fit the model#
modelFit3 <- train(subTrainingData$classe~ .,method="rf",data=bestTrainingVariables,trControl=trainControl(method = 'cv'))
modelFit3
## check for accuracy on validation data#
pred3 <- predict(modelFit3,validationData)
table(pred3,validationData$classe)
## Get the most correlated variables#
variableCorrelations <-  abs(cor(subTrainingData[,-1]))#
## Clear out the diagnoal#
diag(variableCorrelations) <- 0#
## Get the variables with high correlations > 0.85#
highestCorVarNames<- which(variableCorrelations > 0.80,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVarNames[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVarNames,collapse = " + "))#
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , which(names(subTrainingData) %in% highestCorVarNames)]
## Get the most correlated variables#
variableCorrelations <-  abs(cor(subTrainingData[,-1]))#
## Clear out the diagnoal#
diag(variableCorrelations) <- 0#
## Get the variables with high correlations > 0.80#
highestCorVarNames<- which(variableCorrelations > 0.80,arr.ind=T)#
## Get the unique list of variables#
highestCorVarNames <- unique(names(highestCorVarNames[,1]))#
## Build the formula for training#
variableFormula <- paste("classe ~ ",paste(highestCorVarNames,collapse = " + "))#
## Subset the specific variables from training#
bestTrainingVariables <- subTrainingData[ , which(names(subTrainingData) %in% highestCorVarNames)]
#fit the model#
modelFit4 <- train(subTrainingData$classe~ .,method="rf",data=bestTrainingVariables,trControl=trainControl(method = 'cv'))
modelFit4
## check for accuracy on validation data#
pred4 <- predict(modelFit4,validationData)
table(pred4,validationData$classe)
dim(subTrainingData)
unique(lapply(names(subTrainingData), class))
unique(lapply(subTrainingData, class))
as.vector(unique(lapply(subTrainingData, class)))
dim(testingData)
modelfit4
modelFit4
tpred <- predict(modelFit4,testingData)
## convert factors to indicator variables on training#
testingData.dummyvars <- dummyVars(classe ~ ., data=testingData)#
testingData.forest <- as.data.frame(predict(testingData.dummyvars, newdata=testingData))#
testingData.forest <- cbind(testingData$classe,testingData.forest)#
colnames(testingData.forest)[1] <- "classe"#
testingData <- testingData.forest
## convert factors to indicator variables on training#
testingData.dummyvars <- dummyVars( ~ ., data=testingData)#
testingData.forest <- as.data.frame(predict(testingData.dummyvars, newdata=testingData))#
testingData.forest <- cbind(testingData$classe,testingData.forest)#
colnames(testingData.forest)[1] <- "classe"#
testingData <- testingData.forest
## convert factors to indicator variables on training#
testingData.dummyvars <- dummyVars( ~ ., data=testingData)#
testingData.forest <- as.data.frame(predict(testingData.dummyvars, newdata=testingData))#
testingData <- testingData.forest
testingData.forest <- as.data.frame(predict(testingData.dummyvars, newdata=testingData))
t <- predict(testingData.dummyvars, newdata=testingData)
## Remove all columns with NA#
testingData <- testingData[,colSums(is.na(testingData))==0]#
## Remove near zero variance data from training#
testingData <- testingData[,-nearZeroVar(testingData)]
## convert factors to indicator variables on training#
testingData.dummyvars <- dummyVars( ~ ., data=testingData)#
testingData.forest <- as.data.frame(predict(testingData.dummyvars, newdata=testingData))#
testingData <- testingData.forest
tpred <- predict(modelFit4,testingData)
tpred
length(tpred)
pml_write_files = function(x){#
  n = length(x)#
  for(i in 1:n){#
    filename = paste0("problem_id_",i,".txt")#
    write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)#
  }#
}
pm_write_files(tpred)
pml_write_files(tpred)
